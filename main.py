from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
import google.generativeai as genai
import os
import requests
from datetime import datetime

app = FastAPI()

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://academic-chat-refine.lovable.app"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class Query(BaseModel):
    prompt: str

# Load keys
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GOOGLE_SEARCH_API_KEY = os.getenv("GOOGLE_SEARCH_API_KEY")
GOOGLE_SEARCH_CX = os.getenv("GOOGLE_SEARCH_CX")

# Configure Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash-preview-05-20")

def google_search(query: str, num_results: int = 5) -> List[str]:
    """T√¨m ki·∫øm Google v√† tr·∫£ v·ªÅ c√°c snippet c√≥ li√™n quan"""
    search_url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "key": GOOGLE_SEARCH_API_KEY,
        "cx": GOOGLE_SEARCH_CX,
        "q": query,
        "num": num_results
    }

    try:
        response = requests.get(search_url, params=params)
        items = response.json().get("items", [])[:num_results]
        snippets = [f"{item.get('title')}: {item.get('snippet')}" for item in items]
        return snippets
    except Exception as e:
        print("‚ùå L·ªói Google Search:", e)
        return []

@app.post("/api/chat")
async def chat(query: Query):
    print("üì® Prompt ng∆∞·ªùi d√πng:", query.prompt)

    if not GEMINI_API_KEY or not GOOGLE_SEARCH_API_KEY or not GOOGLE_SEARCH_CX:
        return {"answer": "Thi·∫øu c·∫•u h√¨nh API key.", "sources": []}

    # ‚úÖ N·∫øu l√† c√¢u h·ªèi v·ªÅ ng√†y hi·ªán t·∫°i
    if any(x in query.prompt.lower() for x in ["h√¥m nay l√† ng√†y", "ng√†y bao nhi√™u", "today"]):
        today = datetime.now().strftime("H√¥m nay l√† %A, ng√†y %d th√°ng %m nƒÉm %Y.")
        return {"answer": today, "sources": []}

    try:
        # T√¨m ki·∫øm real-time
        snippets = google_search(query.prompt)
        context = "\n".join([f"- {s}" for s in snippets])

        # Prompt ƒë·ªãnh h∆∞·ªõng d√πng d·ªØ ki·ªán m·ªõi
        full_prompt = f"""
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI ƒë√°ng tin c·∫≠y. D∆∞·ªõi ƒë√¢y l√† nh·ªØng d·ªØ li·ªáu t√¨m ki·∫øm m·ªõi nh·∫•t t·ª´ Google.
H√£y tr·∫£ l·ªùi ng∆∞·ªùi d√πng ch·ªâ d·ª±a v√†o th√¥ng tin n√†y, kh√¥ng ph·ªèng ƒëo√°n n·∫øu kh√¥ng c√≥ d·ªØ ki·ªán r√µ r√†ng.

Th√¥ng tin m·ªõi nh·∫•t:
{context}

C√¢u h·ªèi ng∆∞·ªùi d√πng: {query.prompt}
Tr·∫£ l·ªùi:
"""

        response = model.generate_content(full_prompt)
        print("üì• Gemini tr·∫£ v·ªÅ:", response.text)

        return {
            "answer": response.text,
            "sources": snippets
        }

    except Exception as e:
        print("‚ùå L·ªói x·ª≠ l√Ω:", e)
        return {
            "answer": "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra.",
            "sources": []
        }