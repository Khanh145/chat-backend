from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
import google.generativeai as genai
import os
import requests
from datetime import datetime

app = FastAPI()

# CORS cho ph√©p frontend truy c·∫≠p
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://academic-chat-refine.lovable.app"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# D·ªØ li·ªáu t·ª´ frontend
class Query(BaseModel):
    prompt: str

# Load bi·∫øn m√¥i tr∆∞·ªùng
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GOOGLE_SEARCH_API_KEY = os.getenv("GOOGLE_SEARCH_API_KEY")
GOOGLE_SEARCH_CX = os.getenv("GOOGLE_SEARCH_CX")

# C·∫•u h√¨nh Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash-preview-05-20")

# ‚úÖ T√¨m ki·∫øm Google
def google_search(query: str, num_results: int = 5) -> List[str]:
    search_url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "key": GOOGLE_SEARCH_API_KEY,
        "cx": GOOGLE_SEARCH_CX,
        "q": query,
        "num": num_results
    }

    try:
        response = requests.get(search_url, params=params)
        items = response.json().get("items", [])[:num_results]
        snippets = [f"{item.get('title')}: {item.get('snippet')}" for item in items]
        return snippets
    except Exception as e:
        print("‚ùå L·ªói Google Search:", e)
        return []

@app.post("/api/chat")
async def chat(query: Query):
    print("üì® Prompt ng∆∞·ªùi d√πng:", query.prompt)

    if not GEMINI_API_KEY or not GOOGLE_SEARCH_API_KEY or not GOOGLE_SEARCH_CX:
        return {"answer": "Thi·∫øu c·∫•u h√¨nh API key.", "sources": []}

    # Tr·∫£ nhanh n·∫øu ch·ªâ h·ªèi ng√†y
    if any(x in query.prompt.lower() for x in ["h√¥m nay l√† ng√†y", "ng√†y bao nhi√™u", "today"]):
        today = datetime.now().strftime("H√¥m nay l√† %A, ng√†y %d th√°ng %m nƒÉm %Y.")
        return {"answer": today, "sources": []}

    try:
        # üîç Google Search real-time
        search_query = query.prompt
        snippets = google_search(search_query)
        if not snippets:
            return {
                "answer": "Hi·ªán t·∫°i kh√¥ng t√¨m th·∫•y th√¥ng tin m·ªõi n√†o li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa b·∫°n.",
                "sources": []
            }

        # ‚úÖ Prompt Gemini s·ª≠ d·ª•ng d·ªØ ki·ªán c·∫≠p nh·∫≠t
        today = datetime.now().strftime("%d/%m/%Y")
        context = "\n".join([f"- {s}" for s in snippets])
        full_prompt = f"""
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI ƒë√°ng tin c·∫≠y.
D∆∞·ªõi ƒë√¢y l√† th√¥ng tin ƒë∆∞·ª£c c·∫≠p nh·∫≠t m·ªõi nh·∫•t t·ª´ Google Search (ng√†y {today}).
H√£y tr·∫£ l·ªùi c√¢u h·ªèi ng∆∞·ªùi d√πng ch·ªâ d·ª±a v√†o c√°c th√¥ng tin n√†y. N·∫øu kh√¥ng ƒë·ªß d·ªØ ki·ªán, h√£y n√≥i "T√¥i kh√¥ng ch·∫Øc ch·∫Øn d·ª±a tr√™n d·ªØ li·ªáu hi·ªán t·∫°i".

Th√¥ng tin:
{context}

C√¢u h·ªèi: {query.prompt}

Tr·∫£ l·ªùi ng·∫Øn g·ªçn, ƒë√∫ng s·ª± th·∫≠t:
"""

        response = model.generate_content(full_prompt)
        print("üì• Gemini tr·∫£ v·ªÅ:", response.text)

        return {
            "answer": response.text.strip(),
            "sources": snippets
        }

    except Exception as e:
        print("‚ùå L·ªói x·ª≠ l√Ω:", e)
        return {
            "answer": "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra.",
            "sources": []
        }
