from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
import google.generativeai as genai
import os
import requests
from datetime import datetime

app = FastAPI()

# CORS cho frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://academic-chat-refine.lovable.app"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Model d·ªØ li·ªáu ƒë·∫ßu v√†o
class Query(BaseModel):
    prompt: str

# API Key t·ª´ m√¥i tr∆∞·ªùng
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GOOGLE_SEARCH_API_KEY = os.getenv("GOOGLE_SEARCH_API_KEY")
GOOGLE_SEARCH_CX = os.getenv("GOOGLE_SEARCH_CX")

# C·∫•u h√¨nh Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash-preview-05-20")

# üëâ H√†m t·ªëi ∆∞u prompt t√¨m ki·∫øm
def refine_query(prompt: str) -> str:
    prompt = prompt.strip()
    today = datetime.now().strftime("%B %Y")  # v√≠ d·ª•: "June 2025"
    if "?" not in prompt:
        prompt += "?"
    if "hi·ªán t·∫°i" not in prompt.lower() and "m·ªõi nh·∫•t" not in prompt.lower():
        prompt += f" (th√¥ng tin m·ªõi nh·∫•t {today})"
    return prompt

# üëâ H√†m t√¨m ki·∫øm Google
def google_search(query: str, num_results: int = 5) -> List[str]:
    search_url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "key": GOOGLE_SEARCH_API_KEY,
        "cx": GOOGLE_SEARCH_CX,
        "q": query,
        "num": num_results
    }

    try:
        response = requests.get(search_url, params=params)
        items = response.json().get("items", [])[:num_results]
        snippets = [f"{item.get('title')}: {item.get('snippet')}" for item in items]
        return snippets
    except Exception as e:
        print("‚ùå Google Search error:", e)
        return []

@app.post("/api/chat")
async def chat(query: Query):
    print("üì® Prompt ng∆∞·ªùi d√πng:", query.prompt)

    if not GEMINI_API_KEY or not GOOGLE_SEARCH_API_KEY or not GOOGLE_SEARCH_CX:
        return {"answer": "Thi·∫øu c·∫•u h√¨nh API key.", "sources": []}

    # ‚úÖ Tr·∫£ l·ªùi nhanh n·∫øu ch·ªâ h·ªèi ng√†y
    if any(x in query.prompt.lower() for x in ["h√¥m nay l√† ng√†y", "ng√†y bao nhi√™u", "today"]):
        today = datetime.now().strftime("H√¥m nay l√† %A, ng√†y %d th√°ng %m nƒÉm %Y.")
        return {"answer": today, "sources": []}

    try:
        # ‚úÖ C·∫£i thi·ªán c√¢u h·ªèi ƒë·ªÉ t√¨m ki·∫øm hi·ªáu qu·∫£ h∆°n
        search_query = refine_query(query.prompt)

        # üîç T√¨m ki·∫øm Google real-time
        snippets = google_search(search_query)
        if not snippets:
            return {
                "answer": "Hi·ªán t·∫°i kh√¥ng t√¨m th·∫•y th√¥ng tin m·ªõi n√†o li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa b·∫°n.",
                "sources": []
            }

        # ‚úÖ T·∫°o prompt chu·∫©n g·ª≠i ƒë·∫øn Gemini
        today_str = datetime.now().strftime("%d/%m/%Y")
        context = "\n".join([f"- {s}" for s in snippets])
        full_prompt = f"""
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI ch√≠nh x√°c v√† ƒë√°ng tin c·∫≠y.
D∆∞·ªõi ƒë√¢y l√† th√¥ng tin ƒë∆∞·ª£c t√¨m ki·∫øm t·ª´ Google (c·∫≠p nh·∫≠t ng√†y {today_str}).

Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin n√†y ƒë·ªÉ tr·∫£ l·ªùi. N·∫øu kh√¥ng ƒë·ªß d·ªØ ki·ªán, h√£y tr·∫£ l·ªùi r·∫±ng ch∆∞a c√≥ d·ªØ li·ªáu ph√π h·ª£p.

Th√¥ng tin:
{context}

C√¢u h·ªèi ng∆∞·ªùi d√πng: {query.prompt}

Tr·∫£ l·ªùi:
"""

        # ü§ñ G·ª≠i t·ªõi Gemini
        response = model.generate_content(full_prompt)
        print("üì• Gemini tr·∫£ v·ªÅ:", response.text)

        return {
            "answer": response.text.strip(),
            "sources": snippets
        }

    except Exception as e:
        print("‚ùå L·ªói x·ª≠ l√Ω:", e)
        return {
            "answer": "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra.",
            "sources": []
        }
