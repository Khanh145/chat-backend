from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
import google.generativeai as genai
import os
import requests
from datetime import datetime

app = FastAPI()

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://academic-chat-refine.lovable.app"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# D·ªØ li·ªáu frontend g·ª≠i l√™n
class Query(BaseModel):
    prompt: str

# API key
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GOOGLE_SEARCH_API_KEY = os.getenv("GOOGLE_SEARCH_API_KEY")
GOOGLE_SEARCH_CX = os.getenv("GOOGLE_SEARCH_CX")

# C·∫•u h√¨nh Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash-preview-05-20")

# T√¨m ki·∫øm Google
def google_search(query: str, num_results: int = 5) -> List[str]:
    try:
        params = {
            "key": GOOGLE_SEARCH_API_KEY,
            "cx": GOOGLE_SEARCH_CX,
            "q": query,
            "num": num_results
        }
        response = requests.get("https://www.googleapis.com/customsearch/v1", params=params)
        items = response.json().get("items", [])[:num_results]
        return [f"{item['title']}: {item['snippet']}" for item in items]
    except Exception as e:
        print("‚ùå Google Search Error:", e)
        return []

# X·ª≠ l√Ω API chat
@app.post("/api/chat")
async def chat(query: Query):
    print("üì® C√¢u h·ªèi:", query.prompt)

    if not GEMINI_API_KEY or not GOOGLE_SEARCH_API_KEY or not GOOGLE_SEARCH_CX:
        return {"answer": "Ch∆∞a c·∫•u h√¨nh API key.", "sources": []}

    try:
        # B∆∞·ªõc 1: H·ªèi Gemini c√≥ c·∫ßn Google Search kh√¥ng
        check_prompt = f"""
Ng∆∞·ªùi d√πng h·ªèi: "{query.prompt}"

B·∫°n h√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn "YES" n·∫øu c·∫ßn th√™m th√¥ng tin Google ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c h∆°n.
N·∫øu c√≥ th·ªÉ t·ª± tr·∫£ l·ªùi, h√£y vi·∫øt "NO".
Ch·ªâ tr·∫£ v·ªÅ YES ho·∫∑c NO.
"""
        need_search = model.generate_content(check_prompt).text.strip().upper()
        print("ü§ñ C√≥ c·∫ßn t√¨m ki·∫øm kh√¥ng?", need_search)

        snippets = []
        final_prompt = ""

        # B∆∞·ªõc 2: N·∫øu c·∫ßn Google ‚Üí t√¨m ki·∫øm v√† g·ª≠i l·∫°i prompt k√®m context
        if "YES" in need_search:
            snippets = google_search(query.prompt)
            context = "\n".join([f"- {s}" for s in snippets])
            today = datetime.now().strftime("%d/%m/%Y")
            final_prompt = f"""
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI ƒë√°ng tin c·∫≠y. D∆∞·ªõi ƒë√¢y l√† th√¥ng tin t√¨m ki·∫øm m·ªõi nh·∫•t t·ª´ Google (c·∫≠p nh·∫≠t ng√†y {today}).

Ch·ªâ d·ª±a v√†o d·ªØ ki·ªán sau ƒë·ªÉ tr·∫£ l·ªùi:
{context}

C√¢u h·ªèi: {query.prompt}

Tr·∫£ l·ªùi:
"""
        else:
            final_prompt = query.prompt

        # B∆∞·ªõc 3: G·ª≠i prompt ch√≠nh th·ª©c ƒë·∫øn Gemini
        answer = model.generate_content(final_prompt).text.strip()

        return {
            "answer": answer,
            "sources": snippets
        }

    except Exception as e:
        print("‚ùå L·ªói x·ª≠ l√Ω:", e)
        return {
            "answer": "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra.",
            "sources": []
        }
