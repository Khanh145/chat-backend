from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import google.generativeai as genai
import os
from googleapiclient.discovery import build

app = FastAPI()

# ‚úÖ CORS cho ph√©p frontend truy c·∫≠p
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://academic-chat-refine.lovable.app"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚úÖ M√¥ h√¨nh d·ªØ li·ªáu t·ª´ frontend
class Query(BaseModel):
    prompt: str

# ‚úÖ L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
API_KEY = os.getenv("GEMINI_API_KEY")
GOOGLE_SEARCH_API_KEY = os.getenv("GOOGLE_SEARCH_API_KEY")
GOOGLE_SEARCH_CX = os.getenv("GOOGLE_SEARCH_CX")

if not API_KEY:
    print("‚ùå Ch∆∞a c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY")

# ‚úÖ C·∫•u h√¨nh SDK Gemini
genai.configure(api_key=API_KEY)

# ‚úÖ Kh·ªüi t·∫°o model Gemini 2.5 Flash Preview
model = genai.GenerativeModel("gemini-2.5-flash-preview-05-20")

# ‚úÖ H√†m g·ªçi Google Search
def search_sources(query):
    if not GOOGLE_SEARCH_API_KEY or not GOOGLE_SEARCH_CX:
        return []
    try:
        service = build("customsearch", "v1", developerKey=GOOGLE_SEARCH_API_KEY)
        res = service.cse().list(q=query, cx=GOOGLE_SEARCH_CX, num=3).execute()
        results = res.get("items", [])
        return [
            {
                "url": item.get("link"),
                "title": item.get("title"),
                "description": item.get("snippet")
            }
            for item in results
        ]
    except Exception as e:
        print("‚ùå L·ªói Google Search:", e)
        return []

@app.post("/api/chat")
async def chat(query: Query):
    print("üì® Prompt nh·∫≠n ƒë∆∞·ª£c t·ª´ ng∆∞·ªùi d√πng:", query.prompt)

    if not API_KEY:
        return {
            "answer": "Kh√¥ng t√¨m th·∫•y API key. Vui l√≤ng c·∫•u h√¨nh l·∫°i.",
            "sources": []
        }

    try:
        response = model.generate_content(query.prompt)
        print("üì• Ph·∫£n h·ªìi t·ª´ Gemini:", response.text)

        sources = search_sources(query.prompt)

        return {
            "answer": response.text,
            "sources": sources
        }

    except Exception as e:
        print("‚ùå L·ªói khi g·ªçi Gemini API:", e)
        return {
            "answer": "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra.",
            "sources": []
        }